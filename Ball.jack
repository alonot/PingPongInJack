class Ball{
    field int x,y,radius,toleranceLevel;  //toleranceLevel : is about how much above and below the slider the ball will be considered collided
    field Array direction;

    /** initializer */
    constructor Ball new(int Ax,int Ay,int r){
        let x=Ax;
        let y= Ay;
        let radius=r;
        let direction=Array.new(2);
        let direction[0] = 2;
        let direction[1] = 2;
        let toleranceLevel=8;
        do draw();
        return this;
    }

    /** gives the Y velocity of the ball */
    method int getDirection(){
        if(x<490){
        return direction[1];
        }else{
            return 0;
        }
    }

    /** reset the position of the ball */
    method void reset(){
        do erase();
        let x=255;
        let y=127;
        let direction[0] = 2;
        let direction[1] = 2;
        do draw();
        return;
    }

    /** dealloc the memory */
    method void dispose(){
        do direction.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** draws the ball on the screen */
    method void draw(){
        do Screen.setColor(true);
        do Screen.drawCircle(x,y,radius);
        return;
    }

    /** erases the ball */
    method void erase(){
        do Screen.setColor(false);
        do Screen.drawCircle(x,y,radius);
        return;
    }

    /** increases velocity in x */
    method void increaseVx(int incORdec){
        if(incORdec=-1){
            let direction[0]=direction[0]-1; 
            if((y>100) & (y<150)){
                let direction[0]=direction[0]-1;
            }
            
        }else{
            let direction[0]=direction[0]+1; 
            if((y>100) & (y<150)){
                let direction[0]=direction[0]+1;
            }
        }
        return;
    }

    /** gives new velocity to the ball */
    method int computeVelocity(int leftx,int rightx,int velocitySLeft,int velocitySRight,Array SLeftBounds,Array SRightBounds){
        var int flag;
        var boolean pos,posx;
        let flag=0;

        do Output.moveCursor(22,45);

        // if collide with upper or lower wall -->
        if(( y < (22+radius)) | (y >(238-radius-direction[1]))){
            let direction[1]=0-direction[1];
        }
        if (direction[1] >0){
            let pos=true;
        }else{
            let pos=false;
        }

        // If ball is out from left side:
        if( (x < (leftx+radius)) & (direction[0] <0 )){
           if(((y-radius-toleranceLevel)<SLeftBounds[1]) & ((y+radius+toleranceLevel)>SLeftBounds[0])){
                let direction[0]=0-direction[0];
                let flag =1;
           }
            else{
              return -1;
            }
        }

        // If ball is out from right side:
        if(( x > (rightx-radius)) & (direction[0] >0 )){
           if(((y-radius-toleranceLevel)<SRightBounds[1]) & ((y+radius+toleranceLevel)>SRightBounds[0])){
                let direction[0]=0-direction[0];  
                let flag =-1;
                do Output.printInt(direction[0]);
            }
            else{
              return 1;
            }
        }
        if (direction[0] >0){
            let posx=true;
        }else{
            let posx=false;
        }
                
        
        
        //If collide to player's slider -->
        if(flag = -1){
            if(velocitySRight>0){
                if(direction[1]>0){
                   do increaseVx(-1);
                }else{
                    do increaseVx(1);
                }
                let direction[1]=direction[1]+1;
            }
            if(velocitySRight<0){
                if(direction[1]<0){
                   do increaseVx(-1);
                }else{
                   do increaseVx(1);
                }
                let direction[1]=direction[1]-1;
            }
        }

        // if collide to AI's slider -->
        if((flag = 1) & (~(velocitySLeft=0))){
                   let direction[0]=direction[0]+1; 
                if(direction[1]<0){
                   let direction[1]=direction[1]-1; 
                }else{
                    let direction[1]=direction[1]+1;
                }
        }

        // If during increasing or decreasing the y velocity went to high then -->
        if(pos){
            if(direction[1]>4){
               let direction[1]=4;
            }
            if(direction[1]<1){
               let direction[1]=1;
            }
        }else{
            if(direction[1]<-4){
               let direction[1]=-4;
            }
            if(direction[1]>-1){
               let direction[1]=-1;
            }
        }

        // If during increasing or decreasing the y velocity went to high then -->
        if(posx){
            if(direction[0]>4){
               let direction[0]=4;
            }
            if(direction[0]<1){
               let direction[0]=1;
            }
        }else{
            if(direction[0]<-4){
               let direction[0]=-4;
            }
            if(direction[0]>-1){
               let direction[0]=-1;
            }
        }

        
        // if everything goes well then return 0...
        return 0;
    }

    /** Move the ball */
    method int move(int a,int b,int bd,int ad,Array ay,Array by){
        var int result;
        do erase();
        let result=computeVelocity(a,b,bd,ad,ay,by);
        let x=x+direction[0];
        let y=y+direction[1];
        do draw();
        return result;
    }
}